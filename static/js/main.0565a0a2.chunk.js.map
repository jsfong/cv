{"version":3,"sources":["components/Introduction/Introduction.module.css","components/Navigation/Navigation.module.css","components/Navigation/NavBarListItem.module.css","components/Introduction/Introduction.js","components/Navigation/NavBarListItem.js","components/Navigation/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Introduction","className","classes","title","titleHello","titleBig","type","downloadButton","href","class","titleImg","src","alt","NavBarListItem","props","NavItem","NavLink","link","text","NavBar","NavBarBrand","data-toggle","data-target","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0EACAA,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,SAAW,+BAA+B,WAAa,iCAAiC,SAAW,+BAA+B,eAAiB,uC,gBCAzMD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,YAAc,kC,gBCApED,EAAOC,QAAU,CAAC,QAAU,gCAAgC,QAAU,kC,iLCwBvDC,MAtBf,WACE,OACE,yBAAKC,UAAS,0BAAqBC,IAAQC,QACzC,yBAAKF,UAAU,OACb,yBAAKA,UAAU,YACb,wBAAIA,UAAWC,IAAQE,YAAvB,cACA,wBAAIH,UAAWC,IAAQG,UAAvB,WACA,mEACA,4BAAQC,KAAK,SAASL,UAAS,8BAAyBC,IAAQK,gBAAkBC,KAAK,KACrF,uBAAGC,MAAM,oBADX,oBAIA,uBAAGR,UAAS,8BAAyBC,IAAQK,gBAAkBC,KAAK,+BAA8B,uBAAGC,MAAM,oBAA3G,oBAEF,yBAAKR,UAAU,YACb,yBAAKA,UAAWC,IAAQQ,SAAUC,IAAI,kCAAkCC,IAAI,qB,gCCPvEC,MARf,SAAwBC,GACpB,OACI,wBAAIb,UAAS,mBAAcC,IAAQa,UAC/B,uBAAGd,UAAS,mBAAcC,IAAQc,SAAWR,KAAMM,EAAMG,MAAOH,EAAMI,QCqBnEC,MAtBf,WACE,OAEE,yBAAKlB,UAAS,6CAAwCC,IAAQiB,SAC5D,uBAAGlB,UAAS,uBAAkBC,IAAQkB,aAAeZ,KAAK,KAA1D,MACA,4BAAQP,UAAS,iBAAoBK,KAAK,SAASe,cAAY,WAAWC,cAAY,kBACpF,0BAAMb,MAAM,yBAGd,yBAAKA,MAAM,2BAA2Bc,GAAG,iBACvC,wBAAId,MAAM,sBACR,kBAAC,EAAD,CAAgBS,KAAK,QAAQD,KAAK,WAClC,kBAAC,EAAD,CAAgBC,KAAK,aAAaD,KAAK,gBACvC,kBAAC,EAAD,CAAgBC,KAAK,UAAUD,KAAK,iBCA/BO,MAbf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,sCACA,2CACA,wCACA,yCCDcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0565a0a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Introduction_title__zk_f8\",\"titleImg\":\"Introduction_titleImg__3Uu-8\",\"titleHello\":\"Introduction_titleHello__2ub78\",\"titleBig\":\"Introduction_titleBig__WdGw_\",\"downloadButton\":\"Introduction_downloadButton__kdLk6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavBar\":\"Navigation_NavBar__3Ntt-\",\"NavBarBrand\":\"Navigation_NavBarBrand__1Sx5I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavItem\":\"NavBarListItem_NavItem__3cNA4\",\"NavLink\":\"NavBarListItem_NavLink__3H7cN\"};","import React from \"react\";\r\nimport classes from './Introduction.module.css';\r\n\r\nfunction Introduction() {\r\n  return (\r\n    <div className={`container-fluid ${classes.title}`}>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <h4 className={classes.titleHello}>Hello, I'm</h4>\r\n          <h1 className={classes.titleBig}>Js Fong</h1>\r\n          <p>Software engineer based in Singapore</p>\r\n          <button type=\"button\" className={`btn btn-dark btn-lg ${classes.downloadButton}`} href=\"#\" >\r\n            <i class=\"far fa-file-pdf\"></i>\r\n            &nbsp; Download CV\r\n          </button>\r\n          <a className={`btn btn-dark btn-lg ${classes.downloadButton}`} href=\"mailto:jsfong5105@gmail.com\"><i class=\"far fa-envelope\"></i> &nbsp;Contact Me</a>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <img className={classes.titleImg} src=\"https://via.placeholder.com/250\" alt=\"Place holder\"></img>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Introduction;","import React from \"react\";\r\nimport classes from './NavBarListItem.module.css';\r\n\r\nfunction NavBarListItem(props) {\r\n    return (\r\n        <li className={`nav-item ${classes.NavItem}`}>\r\n            <a className={`nav-link ${classes.NavLink}`} href={props.link}>{props.text}</a>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default NavBarListItem;","import React from \"react\";\r\nimport classes from './Navigation.module.css';\r\nimport NavBarListItem from \"./NavBarListItem\";\r\n\r\n\r\nfunction NavBar() {\r\n  return (\r\n\r\n    <nav className={`navbar navbar-expand-lg bg-light\"  ${classes.NavBar}`}>\r\n      <a className={`navbar-brand ${classes.NavBarBrand}`} href=\"#\">Js</a>\r\n      <button className={`navbar-toggler`} type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarToggler\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n\r\n      <div class=\"collapse navbar-collapse\" id=\"navbarToggler\">\r\n        <ul class=\"navbar-nav ml-auto\">       \r\n          <NavBarListItem text=\"Skill\" link=\"#skill\" />\r\n          <NavBarListItem text=\"Experience\" link=\"#experience\" />\r\n          <NavBarListItem text=\"Contact\" link=\"#contact\" />\r\n        </ul>\r\n\r\n      </div>\r\n\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Introduction from './components/Introduction/Introduction';\r\nimport NavBar from './components/Navigation/NavBar'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar />\r\n      <Introduction />\r\n      <div>Skill</div>\r\n      <div>Experience</div>\r\n      <div>Contact</div>\r\n      <div>Footer</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}